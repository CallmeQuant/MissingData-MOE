---
title: "SelvarClustMV"
author: "Ho Huu Binh"
date: "`r Sys.Date()`"
toc: true
format:
  html: 
    toc: true
    toc_float: true
    code: true
    code-fold: true
    code-tools: true
  pdf: 
    fontsize: "12"
    toc: true
    number-sections: true
    number-depth: 3
---

```{r}
install.packages("D:/RProject/SelvarMix_extend.tar", repos = NULL, type="source")
# install.packages("D:/RProject/SelvarMix.tar", repos = NULL, type="source")
```

## Loading libraries
```{r, warning=F, message=F}
rm(list=ls())
library(here)
library(Gmisc)
library(glasso)
library(MixAll)
library(Rmixmod)
library(MASS)
library(mclust)
library(clustvarsel)
library(stats)
library(VarSelLCM)
library(BMA)
library(mlogitBMA)
library(mlogit)
library(foreach)
library(parallel)
library(doParallel)
library(iterators)
library(reshape2)
library(ggplot2)
# library(SelvarMix)
library(matrixStats)  # For efficient matrix operations

source("amputation.R")
```


## Helper functions
```{r}
# Strategy settings for MixAll clustering
quick_precise_strategy <- clusterStrategy(
  nbTry = 10,
  nbInit = 5,
  initMethod = "class",
  initAlgo = "SEM",
  nbInitIteration = 5,
  initEpsilon = 1e-4,
  nbShortRun = 5,
  shortRunAlgo = "EM",
  nbShortIteration = 120,
  shortEpsilon = 1e-6,
  longRunAlgo = "EM",
  nbLongIteration = 150,
  longEpsilon = 1e-7
)

```


## Simulated data
### Maugis 2019
```{r}
# Set seed for reproducibility
set.seed(123)

# Number of observations and variables
n <- 2000
p <- 14

# Generate cluster labels (1 to 4) equally likely
clusters <- sample(1:4, n, replace = TRUE)

# Define cluster parameters with diagonal covariance structure
# Only V1 and V2 contain clustering information
cluster_params <- list(
  list(
    mean = c(0, 0),
    cov = diag(c(0.5, 0.3))
  ),
  list(
    mean = c(4, 0),
    cov = diag(c(1.5, 0.4))
  ),
  list(
    mean = c(0, 2),
    cov = diag(c(0.4, 1.5))
  ),
  list(
    mean = c(4, 2),
    cov = diag(c(2.0, 1.8))
  )
)

# Initialize matrix for first two variables (RELEVANT for clustering)
y1_2 <- matrix(0, nrow = n, ncol = 2)

# Generate y1 and y2 based on cluster assignments
for (k in 1:4) {
  idx <- which(clusters == k)
  n_k <- length(idx)
  if (n_k > 0) {
    y1_2[idx, ] <- mvrnorm(n_k, 
                          mu = cluster_params[[k]]$mean, 
                          Sigma = cluster_params[[k]]$cov)
  }
}

# Parameters for variables 3 to 11 (IRRELEVANT for clustering)
# These variables depend on V1 and V2 but don't contain additional clustering information
intercepts <- c(0, 0, seq(0.4, 2.8, by = 0.4))
b <- matrix(c(
  0.5,  1.0,    
  2.0,  0.0,
  0.0,  3.0,
  1.0,  2.0,
  2.0,  0.0,
  0.5,  0.0,
  4.0,  0.5,
  3.0,  0.0,
  2.0,  1.0
), nrow = 9, byrow = TRUE)

# Generate epsilon with diagonal covariance
# Large enough variance to mask any potential clustering information
var_scale <- rep(2.0, 9)  # Large variance to ensure no clustering information
Omega <- diag(var_scale)

# Generate epsilon
epsilon <- mvrnorm(n, mu = rep(0, 9), Sigma = Omega)

# Compute y_{3:11} = b * y1_2 + intercepts + epsilon
# These variables depend on y1_2 but don't contain clustering information
predicted <- t(b %*% t(y1_2))
predicted <- sweep(predicted, 2, intercepts, "+")
y3_11 <- predicted + epsilon

# Generate y_{12:14} as pure noise variables (IRRELEVANT and INDEPENDENT)
y12_14 <- matrix(0, nrow = n, ncol = 3)
y12_14[,1] <- rnorm(n, sd = 1.0)
y12_14[,2] <- rnorm(n, sd = 1.0)
y12_14[,3] <- rnorm(n, sd = 1.0)

# Assemble the full dataset
data <- cbind(y1_2, y3_11, y12_14)

# Assign column names
colnames(data) <- paste0("V", 1:14)

# Add true cluster labels as attribute
attr(data, "true_clusters") <- clusters

data_missing_obj <- produce_NA(data, mechanism = "MAR", perc.missing = 0.1)
data_missing <- data_missing_obj$data.incomp
```

## Testing
### MixAll vs Mixmod
```{r}
model <- clusterDiagGaussian(data=data, nbCluster=4
                            , models=c( "gaussian_pk_sjk")
                            , strategy = quick_precise_strategy,
                            criterion="BIC")
model2 <- mixmodCluster(as.data.frame(data), 4)
```


### Selvarmix
```{r}
result <- SelvarMix::SelvarClustLasso(x=data, nbcluster=3:4)
result_missing <- SelvarMix::SelvarClustLasso(data_missing, 
                                              nbcluster = 3:4)

result

result2 <- clustvarsel(data, G=2:6, search="greedy",
                       direction = "backward", emModels1 = "V", 
                       emModels2 = "VVI", allow.EEE = FALSE, forcetwo = FALSE)
```